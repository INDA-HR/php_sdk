<?php
/**
 * JobAdToResumesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * INDA HR - INtelligent Data Analysis for HR
 *
 * # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: info@intervieweb.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\inda_hr;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * JobAdToResumesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobAdToResumesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'matchResumesEvidenceFromIndexedJobadPOST' => [
            'application/json',
        ],
        'matchResumesEvidencePOST' => [
            'application/json',
        ],
        'matchResumesFromIndexedJobadPOST' => [
            'application/json',
        ],
        'matchResumesPOST' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation matchResumesEvidenceFromIndexedJobadPOST
     *
     * Match Resumes Evidence from indexed JobAd
     *
     * @param  string $indexname indexname (required)
     * @param  string $jobad_id jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingEvidenceQuery $base_resume_matching_evidence_query base_resume_matching_evidence_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MatchResumeEvidenceResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function matchResumesEvidenceFromIndexedJobadPOST($indexname, $jobad_id, $base_resume_matching_evidence_query, string $contentType = self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'][0])
    {
        list($response) = $this->matchResumesEvidenceFromIndexedJobadPOSTWithHttpInfo($indexname, $jobad_id, $base_resume_matching_evidence_query, $contentType);
        return $response;
    }

    /**
     * Operation matchResumesEvidenceFromIndexedJobadPOSTWithHttpInfo
     *
     * Match Resumes Evidence from indexed JobAd
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingEvidenceQuery $base_resume_matching_evidence_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MatchResumeEvidenceResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function matchResumesEvidenceFromIndexedJobadPOSTWithHttpInfo($indexname, $jobad_id, $base_resume_matching_evidence_query, string $contentType = self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'][0])
    {
        $request = $this->matchResumesEvidenceFromIndexedJobadPOSTRequest($indexname, $jobad_id, $base_resume_matching_evidence_query, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MatchResumeEvidenceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MatchResumeEvidenceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MatchResumeEvidenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MatchResumeEvidenceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MatchResumeEvidenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation matchResumesEvidenceFromIndexedJobadPOSTAsync
     *
     * Match Resumes Evidence from indexed JobAd
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingEvidenceQuery $base_resume_matching_evidence_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesEvidenceFromIndexedJobadPOSTAsync($indexname, $jobad_id, $base_resume_matching_evidence_query, string $contentType = self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'][0])
    {
        return $this->matchResumesEvidenceFromIndexedJobadPOSTAsyncWithHttpInfo($indexname, $jobad_id, $base_resume_matching_evidence_query, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation matchResumesEvidenceFromIndexedJobadPOSTAsyncWithHttpInfo
     *
     * Match Resumes Evidence from indexed JobAd
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingEvidenceQuery $base_resume_matching_evidence_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesEvidenceFromIndexedJobadPOSTAsyncWithHttpInfo($indexname, $jobad_id, $base_resume_matching_evidence_query, string $contentType = self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MatchResumeEvidenceResponse';
        $request = $this->matchResumesEvidenceFromIndexedJobadPOSTRequest($indexname, $jobad_id, $base_resume_matching_evidence_query, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'matchResumesEvidenceFromIndexedJobadPOST'
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingEvidenceQuery $base_resume_matching_evidence_query (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function matchResumesEvidenceFromIndexedJobadPOSTRequest($indexname, $jobad_id, $base_resume_matching_evidence_query, string $contentType = self::contentTypes['matchResumesEvidenceFromIndexedJobadPOST'][0])
    {

        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling matchResumesEvidenceFromIndexedJobadPOST'
            );
        }

        // verify the required parameter 'jobad_id' is set
        if ($jobad_id === null || (is_array($jobad_id) && count($jobad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobad_id when calling matchResumesEvidenceFromIndexedJobadPOST'
            );
        }

        // verify the required parameter 'base_resume_matching_evidence_query' is set
        if ($base_resume_matching_evidence_query === null || (is_array($base_resume_matching_evidence_query) && count($base_resume_matching_evidence_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_resume_matching_evidence_query when calling matchResumesEvidenceFromIndexedJobadPOST'
            );
        }


        $resourcePath = '/hr/v2/index/{indexname}/resumes/matching/jobad/{jobad_id}/evidence/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }
        // path params
        if ($jobad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobad_id' . '}',
                ObjectSerializer::toPathValue($jobad_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($base_resume_matching_evidence_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($base_resume_matching_evidence_query));
            } else {
                $httpBody = $base_resume_matching_evidence_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation matchResumesEvidencePOST
     *
     * Match Resumes Evidence
     *
     * @param  string $indexname indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingEvidenceQuery $resume_matching_evidence_query resume_matching_evidence_query (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidencePOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MatchResumeEvidenceResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function matchResumesEvidencePOST($indexname, $resume_matching_evidence_query, $src_lang = null, string $contentType = self::contentTypes['matchResumesEvidencePOST'][0])
    {
        list($response) = $this->matchResumesEvidencePOSTWithHttpInfo($indexname, $resume_matching_evidence_query, $src_lang, $contentType);
        return $response;
    }

    /**
     * Operation matchResumesEvidencePOSTWithHttpInfo
     *
     * Match Resumes Evidence
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingEvidenceQuery $resume_matching_evidence_query (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidencePOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MatchResumeEvidenceResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function matchResumesEvidencePOSTWithHttpInfo($indexname, $resume_matching_evidence_query, $src_lang = null, string $contentType = self::contentTypes['matchResumesEvidencePOST'][0])
    {
        $request = $this->matchResumesEvidencePOSTRequest($indexname, $resume_matching_evidence_query, $src_lang, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MatchResumeEvidenceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MatchResumeEvidenceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MatchResumeEvidenceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MatchResumeEvidenceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MatchResumeEvidenceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation matchResumesEvidencePOSTAsync
     *
     * Match Resumes Evidence
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingEvidenceQuery $resume_matching_evidence_query (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidencePOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesEvidencePOSTAsync($indexname, $resume_matching_evidence_query, $src_lang = null, string $contentType = self::contentTypes['matchResumesEvidencePOST'][0])
    {
        return $this->matchResumesEvidencePOSTAsyncWithHttpInfo($indexname, $resume_matching_evidence_query, $src_lang, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation matchResumesEvidencePOSTAsyncWithHttpInfo
     *
     * Match Resumes Evidence
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingEvidenceQuery $resume_matching_evidence_query (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidencePOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesEvidencePOSTAsyncWithHttpInfo($indexname, $resume_matching_evidence_query, $src_lang = null, string $contentType = self::contentTypes['matchResumesEvidencePOST'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MatchResumeEvidenceResponse';
        $request = $this->matchResumesEvidencePOSTRequest($indexname, $resume_matching_evidence_query, $src_lang, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'matchResumesEvidencePOST'
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingEvidenceQuery $resume_matching_evidence_query (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesEvidencePOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function matchResumesEvidencePOSTRequest($indexname, $resume_matching_evidence_query, $src_lang = null, string $contentType = self::contentTypes['matchResumesEvidencePOST'][0])
    {

        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling matchResumesEvidencePOST'
            );
        }

        // verify the required parameter 'resume_matching_evidence_query' is set
        if ($resume_matching_evidence_query === null || (is_array($resume_matching_evidence_query) && count($resume_matching_evidence_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resume_matching_evidence_query when calling matchResumesEvidencePOST'
            );
        }



        $resourcePath = '/hr/v2/index/{indexname}/resumes/matching/jobad/evidence/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resume_matching_evidence_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resume_matching_evidence_query));
            } else {
                $httpBody = $resume_matching_evidence_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation matchResumesFromIndexedJobadPOST
     *
     * Match Resumes from indexed JobAd
     *
     * @param  string $indexname indexname (required)
     * @param  string $jobad_id jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingQuery $base_resume_matching_query base_resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  bool $only_applicants If true, it narrows the search to the resumes registered to the job advert. (optional, default to false)
     * @param  bool $exclude_applicants If true, it excludes the resumes registered to the job advert from the search results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchResumeMatchResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function matchResumesFromIndexedJobadPOST($indexname, $jobad_id, $base_resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $dst_lang = null, $resume_langs = null, $only_applicants = false, $exclude_applicants = false, string $contentType = self::contentTypes['matchResumesFromIndexedJobadPOST'][0])
    {
        list($response) = $this->matchResumesFromIndexedJobadPOSTWithHttpInfo($indexname, $jobad_id, $base_resume_matching_query, $size, $offset, $min_score, $dst_lang, $resume_langs, $only_applicants, $exclude_applicants, $contentType);
        return $response;
    }

    /**
     * Operation matchResumesFromIndexedJobadPOSTWithHttpInfo
     *
     * Match Resumes from indexed JobAd
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingQuery $base_resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  bool $only_applicants If true, it narrows the search to the resumes registered to the job advert. (optional, default to false)
     * @param  bool $exclude_applicants If true, it excludes the resumes registered to the job advert from the search results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchResumeMatchResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function matchResumesFromIndexedJobadPOSTWithHttpInfo($indexname, $jobad_id, $base_resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $dst_lang = null, $resume_langs = null, $only_applicants = false, $exclude_applicants = false, string $contentType = self::contentTypes['matchResumesFromIndexedJobadPOST'][0])
    {
        $request = $this->matchResumesFromIndexedJobadPOSTRequest($indexname, $jobad_id, $base_resume_matching_query, $size, $offset, $min_score, $dst_lang, $resume_langs, $only_applicants, $exclude_applicants, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchResumeMatchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchResumeMatchResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchResumeMatchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchResumeMatchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchResumeMatchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation matchResumesFromIndexedJobadPOSTAsync
     *
     * Match Resumes from indexed JobAd
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingQuery $base_resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  bool $only_applicants If true, it narrows the search to the resumes registered to the job advert. (optional, default to false)
     * @param  bool $exclude_applicants If true, it excludes the resumes registered to the job advert from the search results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesFromIndexedJobadPOSTAsync($indexname, $jobad_id, $base_resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $dst_lang = null, $resume_langs = null, $only_applicants = false, $exclude_applicants = false, string $contentType = self::contentTypes['matchResumesFromIndexedJobadPOST'][0])
    {
        return $this->matchResumesFromIndexedJobadPOSTAsyncWithHttpInfo($indexname, $jobad_id, $base_resume_matching_query, $size, $offset, $min_score, $dst_lang, $resume_langs, $only_applicants, $exclude_applicants, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation matchResumesFromIndexedJobadPOSTAsyncWithHttpInfo
     *
     * Match Resumes from indexed JobAd
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingQuery $base_resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  bool $only_applicants If true, it narrows the search to the resumes registered to the job advert. (optional, default to false)
     * @param  bool $exclude_applicants If true, it excludes the resumes registered to the job advert from the search results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesFromIndexedJobadPOSTAsyncWithHttpInfo($indexname, $jobad_id, $base_resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $dst_lang = null, $resume_langs = null, $only_applicants = false, $exclude_applicants = false, string $contentType = self::contentTypes['matchResumesFromIndexedJobadPOST'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchResumeMatchResponse';
        $request = $this->matchResumesFromIndexedJobadPOSTRequest($indexname, $jobad_id, $base_resume_matching_query, $size, $offset, $min_score, $dst_lang, $resume_langs, $only_applicants, $exclude_applicants, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'matchResumesFromIndexedJobadPOST'
     *
     * @param  string $indexname (required)
     * @param  string $jobad_id (required)
     * @param  \OpenAPI\Client\Model\BaseResumeMatchingQuery $base_resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  bool $only_applicants If true, it narrows the search to the resumes registered to the job advert. (optional, default to false)
     * @param  bool $exclude_applicants If true, it excludes the resumes registered to the job advert from the search results. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesFromIndexedJobadPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function matchResumesFromIndexedJobadPOSTRequest($indexname, $jobad_id, $base_resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $dst_lang = null, $resume_langs = null, $only_applicants = false, $exclude_applicants = false, string $contentType = self::contentTypes['matchResumesFromIndexedJobadPOST'][0])
    {

        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling matchResumesFromIndexedJobadPOST'
            );
        }

        // verify the required parameter 'jobad_id' is set
        if ($jobad_id === null || (is_array($jobad_id) && count($jobad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobad_id when calling matchResumesFromIndexedJobadPOST'
            );
        }

        // verify the required parameter 'base_resume_matching_query' is set
        if ($base_resume_matching_query === null || (is_array($base_resume_matching_query) && count($base_resume_matching_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_resume_matching_query when calling matchResumesFromIndexedJobadPOST'
            );
        }

        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, must be smaller than or equal to 100.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, must be bigger than or equal to 0.');
        }
        
        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, must be bigger than or equal to 0.0.');
        }
        
        if ($dst_lang !== null && count($dst_lang) > 6) {
            throw new \InvalidArgumentException('invalid value for "$dst_lang" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, number of items must be less than or equal to 6.');
        }
        if ($dst_lang !== null && count($dst_lang) < 0) {
            throw new \InvalidArgumentException('invalid value for "$dst_lang" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, number of items must be greater than or equal to 0.');
        }
        
        if ($resume_langs !== null && count($resume_langs) > 6) {
            throw new \InvalidArgumentException('invalid value for "$resume_langs" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, number of items must be less than or equal to 6.');
        }
        if ($resume_langs !== null && count($resume_langs) < 0) {
            throw new \InvalidArgumentException('invalid value for "$resume_langs" when calling JobAdToResumesApi.matchResumesFromIndexedJobadPOST, number of items must be greater than or equal to 0.');
        }
        



        $resourcePath = '/hr/v2/index/{indexname}/resumes/matching/jobad/{jobad_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_lang,
            'dst_lang', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resume_langs,
            'resume_langs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_applicants,
            'only_applicants', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_applicants,
            'exclude_applicants', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }
        // path params
        if ($jobad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobad_id' . '}',
                ObjectSerializer::toPathValue($jobad_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($base_resume_matching_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($base_resume_matching_query));
            } else {
                $httpBody = $base_resume_matching_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation matchResumesPOST
     *
     * Match Resumes
     *
     * @param  string $indexname indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingQuery $resume_matching_query resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchResumeMatchResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function matchResumesPOST($indexname, $resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $src_lang = null, $dst_lang = null, $resume_langs = null, string $contentType = self::contentTypes['matchResumesPOST'][0])
    {
        list($response) = $this->matchResumesPOSTWithHttpInfo($indexname, $resume_matching_query, $size, $offset, $min_score, $src_lang, $dst_lang, $resume_langs, $contentType);
        return $response;
    }

    /**
     * Operation matchResumesPOSTWithHttpInfo
     *
     * Match Resumes
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingQuery $resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesPOST'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchResumeMatchResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function matchResumesPOSTWithHttpInfo($indexname, $resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $src_lang = null, $dst_lang = null, $resume_langs = null, string $contentType = self::contentTypes['matchResumesPOST'][0])
    {
        $request = $this->matchResumesPOSTRequest($indexname, $resume_matching_query, $size, $offset, $min_score, $src_lang, $dst_lang, $resume_langs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchResumeMatchResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchResumeMatchResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchResumeMatchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchResumeMatchResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchResumeMatchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation matchResumesPOSTAsync
     *
     * Match Resumes
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingQuery $resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesPOSTAsync($indexname, $resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $src_lang = null, $dst_lang = null, $resume_langs = null, string $contentType = self::contentTypes['matchResumesPOST'][0])
    {
        return $this->matchResumesPOSTAsyncWithHttpInfo($indexname, $resume_matching_query, $size, $offset, $min_score, $src_lang, $dst_lang, $resume_langs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation matchResumesPOSTAsyncWithHttpInfo
     *
     * Match Resumes
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingQuery $resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function matchResumesPOSTAsyncWithHttpInfo($indexname, $resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $src_lang = null, $dst_lang = null, $resume_langs = null, string $contentType = self::contentTypes['matchResumesPOST'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchResumeMatchResponse';
        $request = $this->matchResumesPOSTRequest($indexname, $resume_matching_query, $size, $offset, $min_score, $src_lang, $dst_lang, $resume_langs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'matchResumesPOST'
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\ResumeMatchingQuery $resume_matching_query (required)
     * @param  int $size Optional. Number of documents to return. (optional, default to 20)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will be detected automatically. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  string[] $resume_langs DEPRECATED: use &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;dst_langs&lt;/code&gt; instead. Results languages. If left empty then the results will not be filtered by language. (optional) (deprecated)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['matchResumesPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function matchResumesPOSTRequest($indexname, $resume_matching_query, $size = 20, $offset = 0, $min_score = 0, $src_lang = null, $dst_lang = null, $resume_langs = null, string $contentType = self::contentTypes['matchResumesPOST'][0])
    {

        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling matchResumesPOST'
            );
        }

        // verify the required parameter 'resume_matching_query' is set
        if ($resume_matching_query === null || (is_array($resume_matching_query) && count($resume_matching_query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resume_matching_query when calling matchResumesPOST'
            );
        }

        if ($size !== null && $size > 100) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling JobAdToResumesApi.matchResumesPOST, must be smaller than or equal to 100.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling JobAdToResumesApi.matchResumesPOST, must be bigger than or equal to 0.');
        }
        
        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling JobAdToResumesApi.matchResumesPOST, must be bigger than or equal to 0.0.');
        }
        

        if ($dst_lang !== null && count($dst_lang) > 6) {
            throw new \InvalidArgumentException('invalid value for "$dst_lang" when calling JobAdToResumesApi.matchResumesPOST, number of items must be less than or equal to 6.');
        }
        if ($dst_lang !== null && count($dst_lang) < 0) {
            throw new \InvalidArgumentException('invalid value for "$dst_lang" when calling JobAdToResumesApi.matchResumesPOST, number of items must be greater than or equal to 0.');
        }
        
        if ($resume_langs !== null && count($resume_langs) > 6) {
            throw new \InvalidArgumentException('invalid value for "$resume_langs" when calling JobAdToResumesApi.matchResumesPOST, number of items must be less than or equal to 6.');
        }
        if ($resume_langs !== null && count($resume_langs) < 0) {
            throw new \InvalidArgumentException('invalid value for "$resume_langs" when calling JobAdToResumesApi.matchResumesPOST, number of items must be greater than or equal to 0.');
        }
        

        $resourcePath = '/hr/v2/index/{indexname}/resumes/matching/jobad/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_lang,
            'dst_lang', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resume_langs,
            'resume_langs', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resume_matching_query)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($resume_matching_query));
            } else {
                $httpBody = $resume_matching_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
