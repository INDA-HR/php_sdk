<?php
/**
 * ResumeSearchApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * INDA HR - INtelligent Data Analysis for HR
 *
 * # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\inda_hr;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ResumeSearchApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResumeSearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation fullTextSearchOnResumesPOST
     *
     * Full-Text Search on Resumes
     *
     * @param  string $indexname indexname (required)
     * @param  string $default_operator Optional. Change this to *AND* if you wish documents to match ALLof the tokens in a single query_terms element. (optional, default to 'OR')
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\TraditionalDocsSearchQuery $traditional_docs_search_query traditional_docs_search_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FoundDocsResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function fullTextSearchOnResumesPOST($indexname, $default_operator = 'OR', $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $traditional_docs_search_query = null)
    {
        list($response) = $this->fullTextSearchOnResumesPOSTWithHttpInfo($indexname, $default_operator, $cache, $cache_time, $size, $offset, $min_score, $search_id, $traditional_docs_search_query);
        return $response;
    }

    /**
     * Operation fullTextSearchOnResumesPOSTWithHttpInfo
     *
     * Full-Text Search on Resumes
     *
     * @param  string $indexname (required)
     * @param  string $default_operator Optional. Change this to *AND* if you wish documents to match ALLof the tokens in a single query_terms element. (optional, default to 'OR')
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\TraditionalDocsSearchQuery $traditional_docs_search_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FoundDocsResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullTextSearchOnResumesPOSTWithHttpInfo($indexname, $default_operator = 'OR', $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $traditional_docs_search_query = null)
    {
        $request = $this->fullTextSearchOnResumesPOSTRequest($indexname, $default_operator, $cache, $cache_time, $size, $offset, $min_score, $search_id, $traditional_docs_search_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FoundDocsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FoundDocsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FoundDocsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FoundDocsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FoundDocsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullTextSearchOnResumesPOSTAsync
     *
     * Full-Text Search on Resumes
     *
     * @param  string $indexname (required)
     * @param  string $default_operator Optional. Change this to *AND* if you wish documents to match ALLof the tokens in a single query_terms element. (optional, default to 'OR')
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\TraditionalDocsSearchQuery $traditional_docs_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullTextSearchOnResumesPOSTAsync($indexname, $default_operator = 'OR', $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $traditional_docs_search_query = null)
    {
        return $this->fullTextSearchOnResumesPOSTAsyncWithHttpInfo($indexname, $default_operator, $cache, $cache_time, $size, $offset, $min_score, $search_id, $traditional_docs_search_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fullTextSearchOnResumesPOSTAsyncWithHttpInfo
     *
     * Full-Text Search on Resumes
     *
     * @param  string $indexname (required)
     * @param  string $default_operator Optional. Change this to *AND* if you wish documents to match ALLof the tokens in a single query_terms element. (optional, default to 'OR')
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\TraditionalDocsSearchQuery $traditional_docs_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullTextSearchOnResumesPOSTAsyncWithHttpInfo($indexname, $default_operator = 'OR', $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $traditional_docs_search_query = null)
    {
        $returnType = '\OpenAPI\Client\Model\FoundDocsResponse';
        $request = $this->fullTextSearchOnResumesPOSTRequest($indexname, $default_operator, $cache, $cache_time, $size, $offset, $min_score, $search_id, $traditional_docs_search_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullTextSearchOnResumesPOST'
     *
     * @param  string $indexname (required)
     * @param  string $default_operator Optional. Change this to *AND* if you wish documents to match ALLof the tokens in a single query_terms element. (optional, default to 'OR')
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\TraditionalDocsSearchQuery $traditional_docs_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullTextSearchOnResumesPOSTRequest($indexname, $default_operator = 'OR', $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $traditional_docs_search_query = null)
    {
        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling fullTextSearchOnResumesPOST'
            );
        }
        if ($cache_time !== null && $cache_time > 600) {
            throw new \InvalidArgumentException('invalid value for "$cache_time" when calling ResumeSearchApi.fullTextSearchOnResumesPOST, must be smaller than or equal to 600.');
        }

        if ($size !== null && $size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ResumeSearchApi.fullTextSearchOnResumesPOST, must be smaller than or equal to 1000.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ResumeSearchApi.fullTextSearchOnResumesPOST, must be bigger than or equal to 0.');
        }

        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling ResumeSearchApi.fullTextSearchOnResumesPOST, must be bigger than or equal to 0.0.');
        }


        $resourcePath = '/hr/v2/index/{indexname}/resumes/search/full-text/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $default_operator,
            'default_operator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache,
            'cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache_time,
            'cache_time', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'search_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($traditional_docs_search_query)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($traditional_docs_search_query));
            } else {
                $httpBody = $traditional_docs_search_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchApplicantsPOST
     *
     * Search Applicants
     *
     * @param  string $indexname indexname (required)
     * @param  JobadId $jobad_id jobad_id (required)
     * @param  int $cache_time Optional. Seconds. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\CandidateSearchQuery $candidate_search_query candidate_search_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FoundCandidatesResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function searchApplicantsPOST($indexname, $jobad_id, $cache_time = 300, $size = 50, $search_id = null, $candidate_search_query = null)
    {
        list($response) = $this->searchApplicantsPOSTWithHttpInfo($indexname, $jobad_id, $cache_time, $size, $search_id, $candidate_search_query);
        return $response;
    }

    /**
     * Operation searchApplicantsPOSTWithHttpInfo
     *
     * Search Applicants
     *
     * @param  string $indexname (required)
     * @param  JobadId $jobad_id (required)
     * @param  int $cache_time Optional. Seconds. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\CandidateSearchQuery $candidate_search_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FoundCandidatesResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchApplicantsPOSTWithHttpInfo($indexname, $jobad_id, $cache_time = 300, $size = 50, $search_id = null, $candidate_search_query = null)
    {
        $request = $this->searchApplicantsPOSTRequest($indexname, $jobad_id, $cache_time, $size, $search_id, $candidate_search_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FoundCandidatesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FoundCandidatesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FoundCandidatesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FoundCandidatesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FoundCandidatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchApplicantsPOSTAsync
     *
     * Search Applicants
     *
     * @param  string $indexname (required)
     * @param  JobadId $jobad_id (required)
     * @param  int $cache_time Optional. Seconds. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\CandidateSearchQuery $candidate_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchApplicantsPOSTAsync($indexname, $jobad_id, $cache_time = 300, $size = 50, $search_id = null, $candidate_search_query = null)
    {
        return $this->searchApplicantsPOSTAsyncWithHttpInfo($indexname, $jobad_id, $cache_time, $size, $search_id, $candidate_search_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchApplicantsPOSTAsyncWithHttpInfo
     *
     * Search Applicants
     *
     * @param  string $indexname (required)
     * @param  JobadId $jobad_id (required)
     * @param  int $cache_time Optional. Seconds. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\CandidateSearchQuery $candidate_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchApplicantsPOSTAsyncWithHttpInfo($indexname, $jobad_id, $cache_time = 300, $size = 50, $search_id = null, $candidate_search_query = null)
    {
        $returnType = '\OpenAPI\Client\Model\FoundCandidatesResponse';
        $request = $this->searchApplicantsPOSTRequest($indexname, $jobad_id, $cache_time, $size, $search_id, $candidate_search_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchApplicantsPOST'
     *
     * @param  string $indexname (required)
     * @param  JobadId $jobad_id (required)
     * @param  int $cache_time Optional. Seconds. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  \OpenAPI\Client\Model\CandidateSearchQuery $candidate_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchApplicantsPOSTRequest($indexname, $jobad_id, $cache_time = 300, $size = 50, $search_id = null, $candidate_search_query = null)
    {
        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling searchApplicantsPOST'
            );
        }
        // verify the required parameter 'jobad_id' is set
        if ($jobad_id === null || (is_array($jobad_id) && count($jobad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobad_id when calling searchApplicantsPOST'
            );
        }
        if ($cache_time !== null && $cache_time > 600) {
            throw new \InvalidArgumentException('invalid value for "$cache_time" when calling ResumeSearchApi.searchApplicantsPOST, must be smaller than or equal to 600.');
        }

        if ($size !== null && $size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ResumeSearchApi.searchApplicantsPOST, must be smaller than or equal to 1000.');
        }


        $resourcePath = '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resumes/search/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache_time,
            'cache_time', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'search_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }
        // path params
        if ($jobad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobad_id' . '}',
                ObjectSerializer::toPathValue($jobad_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($candidate_search_query)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($candidate_search_query));
            } else {
                $httpBody = $candidate_search_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchResumesEvidencePOST
     *
     * Search Resumes Evidence
     *
     * @param  string $indexname indexname (required)
     * @param  \OpenAPI\Client\Model\EvidenceRequest $evidence_request evidence_request (required)
     * @param  int $size Number of elements to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;5&lt;/code&gt;. (optional, default to 3)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchEvidence[]|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel
     */
    public function searchResumesEvidencePOST($indexname, $evidence_request, $size = 3, $src_lang = null)
    {
        list($response) = $this->searchResumesEvidencePOSTWithHttpInfo($indexname, $evidence_request, $size, $src_lang);
        return $response;
    }

    /**
     * Operation searchResumesEvidencePOSTWithHttpInfo
     *
     * Search Resumes Evidence
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\EvidenceRequest $evidence_request (required)
     * @param  int $size Number of elements to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;5&lt;/code&gt;. (optional, default to 3)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchEvidence[]|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchResumesEvidencePOSTWithHttpInfo($indexname, $evidence_request, $size = 3, $src_lang = null)
    {
        $request = $this->searchResumesEvidencePOSTRequest($indexname, $evidence_request, $size, $src_lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchEvidence[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchEvidence[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchEvidence[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchEvidence[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchEvidence[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchResumesEvidencePOSTAsync
     *
     * Search Resumes Evidence
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\EvidenceRequest $evidence_request (required)
     * @param  int $size Number of elements to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;5&lt;/code&gt;. (optional, default to 3)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchResumesEvidencePOSTAsync($indexname, $evidence_request, $size = 3, $src_lang = null)
    {
        return $this->searchResumesEvidencePOSTAsyncWithHttpInfo($indexname, $evidence_request, $size, $src_lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchResumesEvidencePOSTAsyncWithHttpInfo
     *
     * Search Resumes Evidence
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\EvidenceRequest $evidence_request (required)
     * @param  int $size Number of elements to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;5&lt;/code&gt;. (optional, default to 3)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchResumesEvidencePOSTAsyncWithHttpInfo($indexname, $evidence_request, $size = 3, $src_lang = null)
    {
        $returnType = '\OpenAPI\Client\Model\SearchEvidence[]';
        $request = $this->searchResumesEvidencePOSTRequest($indexname, $evidence_request, $size, $src_lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchResumesEvidencePOST'
     *
     * @param  string $indexname (required)
     * @param  \OpenAPI\Client\Model\EvidenceRequest $evidence_request (required)
     * @param  int $size Number of elements to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;5&lt;/code&gt;. (optional, default to 3)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchResumesEvidencePOSTRequest($indexname, $evidence_request, $size = 3, $src_lang = null)
    {
        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling searchResumesEvidencePOST'
            );
        }
        // verify the required parameter 'evidence_request' is set
        if ($evidence_request === null || (is_array($evidence_request) && count($evidence_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evidence_request when calling searchResumesEvidencePOST'
            );
        }
        if ($size !== null && $size > 5) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ResumeSearchApi.searchResumesEvidencePOST, must be smaller than or equal to 5.');
        }


        $resourcePath = '/hr/v2/index/{indexname}/resumes/search/semantic/evidence/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($evidence_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($evidence_request));
            } else {
                $httpBody = $evidence_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchResumesPOST
     *
     * Search Resumes
     *
     * @param  string $indexname indexname (required)
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  \OpenAPI\Client\Model\DocsSearchQuery $docs_search_query docs_search_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FoundDocsResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel
     */
    public function searchResumesPOST($indexname, $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $src_lang = null, $dst_lang = null, $docs_search_query = null)
    {
        list($response) = $this->searchResumesPOSTWithHttpInfo($indexname, $cache, $cache_time, $size, $offset, $min_score, $search_id, $src_lang, $dst_lang, $docs_search_query);
        return $response;
    }

    /**
     * Operation searchResumesPOSTWithHttpInfo
     *
     * Search Resumes
     *
     * @param  string $indexname (required)
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  \OpenAPI\Client\Model\DocsSearchQuery $docs_search_query (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FoundDocsResponse|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel|\OpenAPI\Client\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchResumesPOSTWithHttpInfo($indexname, $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $src_lang = null, $dst_lang = null, $docs_search_query = null)
    {
        $request = $this->searchResumesPOSTRequest($indexname, $cache, $cache_time, $size, $offset, $min_score, $search_id, $src_lang, $dst_lang, $docs_search_query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FoundDocsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FoundDocsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FoundDocsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\FoundDocsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FoundDocsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchResumesPOSTAsync
     *
     * Search Resumes
     *
     * @param  string $indexname (required)
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  \OpenAPI\Client\Model\DocsSearchQuery $docs_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchResumesPOSTAsync($indexname, $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $src_lang = null, $dst_lang = null, $docs_search_query = null)
    {
        return $this->searchResumesPOSTAsyncWithHttpInfo($indexname, $cache, $cache_time, $size, $offset, $min_score, $search_id, $src_lang, $dst_lang, $docs_search_query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchResumesPOSTAsyncWithHttpInfo
     *
     * Search Resumes
     *
     * @param  string $indexname (required)
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  \OpenAPI\Client\Model\DocsSearchQuery $docs_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchResumesPOSTAsyncWithHttpInfo($indexname, $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $src_lang = null, $dst_lang = null, $docs_search_query = null)
    {
        $returnType = '\OpenAPI\Client\Model\FoundDocsResponse';
        $request = $this->searchResumesPOSTRequest($indexname, $cache, $cache_time, $size, $offset, $min_score, $search_id, $src_lang, $dst_lang, $docs_search_query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchResumesPOST'
     *
     * @param  string $indexname (required)
     * @param  bool $cache Optional. Whether the search results should be cached or not. (optional, default to true)
     * @param  int $cache_time Optional. Seconds. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;false&lt;/code&gt;. (optional, default to 300)
     * @param  int $size Optional. Number of documents to return. (optional, default to 50)
     * @param  int $offset Optional. Number of documents to skip. Ignored if *cache* is &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;true&lt;/code&gt;. (optional, default to 0)
     * @param  float $min_score Optional. Minimum pertinence score. (optional, default to 0)
     * @param  string $search_id Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used. (optional)
     * @param  string $src_lang Queries language. If left empty each query&#39;s language will detected automatically, if not it is not explicitly set into the request body. (optional)
     * @param  string[] $dst_lang Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results. (optional)
     * @param  \OpenAPI\Client\Model\DocsSearchQuery $docs_search_query (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchResumesPOSTRequest($indexname, $cache = true, $cache_time = 300, $size = 50, $offset = 0, $min_score = 0, $search_id = null, $src_lang = null, $dst_lang = null, $docs_search_query = null)
    {
        // verify the required parameter 'indexname' is set
        if ($indexname === null || (is_array($indexname) && count($indexname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $indexname when calling searchResumesPOST'
            );
        }
        if ($cache_time !== null && $cache_time > 600) {
            throw new \InvalidArgumentException('invalid value for "$cache_time" when calling ResumeSearchApi.searchResumesPOST, must be smaller than or equal to 600.');
        }

        if ($size !== null && $size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling ResumeSearchApi.searchResumesPOST, must be smaller than or equal to 1000.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling ResumeSearchApi.searchResumesPOST, must be bigger than or equal to 0.');
        }

        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling ResumeSearchApi.searchResumesPOST, must be bigger than or equal to 0.0.');
        }

        if ($dst_lang !== null && count($dst_lang) > 6) {
            throw new \InvalidArgumentException('invalid value for "$dst_lang" when calling ResumeSearchApi.searchResumesPOST, number of items must be less than or equal to 6.');
        }
        if ($dst_lang !== null && count($dst_lang) < 0) {
            throw new \InvalidArgumentException('invalid value for "$dst_lang" when calling ResumeSearchApi.searchResumesPOST, number of items must be greater than or equal to 0.');
        }


        $resourcePath = '/hr/v2/index/{indexname}/resumes/search/semantic/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache,
            'cache', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache_time,
            'cache_time', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_id,
            'search_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_lang,
            'dst_lang', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($indexname !== null) {
            $resourcePath = str_replace(
                '{' . 'indexname' . '}',
                ObjectSerializer::toPathValue($indexname),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($docs_search_query)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($docs_search_query));
            } else {
                $httpBody = $docs_search_query;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
