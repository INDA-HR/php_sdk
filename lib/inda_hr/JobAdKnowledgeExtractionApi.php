<?php
/**
 * JobAdKnowledgeExtractionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * INDA HR - INtelligent Data Analysis for HR
 *
 * # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\inda_hr;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * JobAdKnowledgeExtractionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class JobAdKnowledgeExtractionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation extractJobtitlesFromJobadPOST
     *
     * Extract JobTitles from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of job titles to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed job titles. The job titles with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobAdJobTitlesResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function extractJobtitlesFromJobadPOST($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        list($response) = $this->extractJobtitlesFromJobadPOSTWithHttpInfo($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);
        return $response;
    }

    /**
     * Operation extractJobtitlesFromJobadPOSTWithHttpInfo
     *
     * Extract JobTitles from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of job titles to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed job titles. The job titles with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobAdJobTitlesResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractJobtitlesFromJobadPOSTWithHttpInfo($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        $request = $this->extractJobtitlesFromJobadPOSTRequest($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JobAdJobTitlesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobAdJobTitlesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobAdJobTitlesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobAdJobTitlesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobAdJobTitlesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractJobtitlesFromJobadPOSTAsync
     *
     * Extract JobTitles from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of job titles to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed job titles. The job titles with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractJobtitlesFromJobadPOSTAsync($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        return $this->extractJobtitlesFromJobadPOSTAsyncWithHttpInfo($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractJobtitlesFromJobadPOSTAsyncWithHttpInfo
     *
     * Extract JobTitles from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of job titles to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed job titles. The job titles with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractJobtitlesFromJobadPOSTAsyncWithHttpInfo($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        $returnType = '\OpenAPI\Client\Model\JobAdJobTitlesResponse';
        $request = $this->extractJobtitlesFromJobadPOSTRequest($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractJobtitlesFromJobadPOST'
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of job titles to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed job titles. The job titles with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractJobtitlesFromJobadPOSTRequest($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        // verify the required parameter 'job_ad_job_description_request' is set
        if ($job_ad_job_description_request === null || (is_array($job_ad_job_description_request) && count($job_ad_job_description_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_ad_job_description_request when calling extractJobtitlesFromJobadPOST'
            );
        }
        if ($size !== null && $size > 20) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling JobAdKnowledgeExtractionApi.extractJobtitlesFromJobadPOST, must be smaller than or equal to 20.');
        }

        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling JobAdKnowledgeExtractionApi.extractJobtitlesFromJobadPOST, must be bigger than or equal to 0.0.');
        }


        $resourcePath = '/hr/v2/parse/jobad/jobtitles/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_lang,
            'dst_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($job_ad_job_description_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($job_ad_job_description_request));
            } else {
                $httpBody = $job_ad_job_description_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extractLanguagesFromJobadPOST
     *
     * Extract Languages from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of languages to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed languages. The languages with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobAdLanguagesResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function extractLanguagesFromJobadPOST($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        list($response) = $this->extractLanguagesFromJobadPOSTWithHttpInfo($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);
        return $response;
    }

    /**
     * Operation extractLanguagesFromJobadPOSTWithHttpInfo
     *
     * Extract Languages from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of languages to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed languages. The languages with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobAdLanguagesResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractLanguagesFromJobadPOSTWithHttpInfo($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        $request = $this->extractLanguagesFromJobadPOSTRequest($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JobAdLanguagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobAdLanguagesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobAdLanguagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobAdLanguagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobAdLanguagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractLanguagesFromJobadPOSTAsync
     *
     * Extract Languages from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of languages to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed languages. The languages with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractLanguagesFromJobadPOSTAsync($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        return $this->extractLanguagesFromJobadPOSTAsyncWithHttpInfo($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractLanguagesFromJobadPOSTAsyncWithHttpInfo
     *
     * Extract Languages from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of languages to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed languages. The languages with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractLanguagesFromJobadPOSTAsyncWithHttpInfo($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        $returnType = '\OpenAPI\Client\Model\JobAdLanguagesResponse';
        $request = $this->extractLanguagesFromJobadPOSTRequest($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractLanguagesFromJobadPOST'
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of languages to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed languages. The languages with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractLanguagesFromJobadPOSTRequest($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        // verify the required parameter 'job_ad_job_description_request' is set
        if ($job_ad_job_description_request === null || (is_array($job_ad_job_description_request) && count($job_ad_job_description_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_ad_job_description_request when calling extractLanguagesFromJobadPOST'
            );
        }
        if ($size !== null && $size > 20) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling JobAdKnowledgeExtractionApi.extractLanguagesFromJobadPOST, must be smaller than or equal to 20.');
        }

        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling JobAdKnowledgeExtractionApi.extractLanguagesFromJobadPOST, must be bigger than or equal to 0.0.');
        }


        $resourcePath = '/hr/v2/parse/jobad/languages/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_lang,
            'dst_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($job_ad_job_description_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($job_ad_job_description_request));
            } else {
                $httpBody = $job_ad_job_description_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extractSkillsFromJobadPOST
     *
     * Extract Skills from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of skills to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed skills. The skills with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JobAdSkillsResponse|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function extractSkillsFromJobadPOST($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        list($response) = $this->extractSkillsFromJobadPOSTWithHttpInfo($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);
        return $response;
    }

    /**
     * Operation extractSkillsFromJobadPOSTWithHttpInfo
     *
     * Extract Skills from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of skills to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed skills. The skills with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JobAdSkillsResponse|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractSkillsFromJobadPOSTWithHttpInfo($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        $request = $this->extractSkillsFromJobadPOSTRequest($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JobAdSkillsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JobAdSkillsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JobAdSkillsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JobAdSkillsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JobAdSkillsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractSkillsFromJobadPOSTAsync
     *
     * Extract Skills from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of skills to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed skills. The skills with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractSkillsFromJobadPOSTAsync($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        return $this->extractSkillsFromJobadPOSTAsyncWithHttpInfo($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractSkillsFromJobadPOSTAsyncWithHttpInfo
     *
     * Extract Skills from JobAd
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of skills to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed skills. The skills with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractSkillsFromJobadPOSTAsyncWithHttpInfo($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        $returnType = '\OpenAPI\Client\Model\JobAdSkillsResponse';
        $request = $this->extractSkillsFromJobadPOSTRequest($job_ad_job_description_request, $src_lang, $dst_lang, $size, $min_score);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractSkillsFromJobadPOST'
     *
     * @param  \OpenAPI\Client\Model\JobAdJobDescriptionRequest $job_ad_job_description_request (required)
     * @param  string $src_lang Job Description language. If left empty each section&#39;s language will detected automatically. (optional)
     * @param  string $dst_lang Extracted entities destination language. If left empty is assumed to be equal to the Job Description language. (optional)
     * @param  int $size Number of skills to be returned, must be greater than &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;0&lt;/code&gt; and smaller or equal to &lt;code style&#x3D;&#39;color: #333333; opacity: 0.9&#39;&gt;20&lt;/code&gt;. (optional, default to 10)
     * @param  float $min_score Minimum score for the proposed skills. The skills with a score lower than this value will be neglected. (optional, default to 0.2)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractSkillsFromJobadPOSTRequest($job_ad_job_description_request, $src_lang = null, $dst_lang = null, $size = 10, $min_score = 0.2)
    {
        // verify the required parameter 'job_ad_job_description_request' is set
        if ($job_ad_job_description_request === null || (is_array($job_ad_job_description_request) && count($job_ad_job_description_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_ad_job_description_request when calling extractSkillsFromJobadPOST'
            );
        }
        if ($size !== null && $size > 20) {
            throw new \InvalidArgumentException('invalid value for "$size" when calling JobAdKnowledgeExtractionApi.extractSkillsFromJobadPOST, must be smaller than or equal to 20.');
        }

        if ($min_score !== null && $min_score < 0.0) {
            throw new \InvalidArgumentException('invalid value for "$min_score" when calling JobAdKnowledgeExtractionApi.extractSkillsFromJobadPOST, must be bigger than or equal to 0.0.');
        }


        $resourcePath = '/hr/v2/parse/jobad/skills/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $src_lang,
            'src_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dst_lang,
            'dst_lang', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $size,
            'size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_score,
            'min_score', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($job_ad_job_description_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($job_ad_job_description_request));
            } else {
                $httpBody = $job_ad_job_description_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
