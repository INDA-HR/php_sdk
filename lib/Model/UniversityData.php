<?php
/**
 * UniversityData
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * INDA HR - INtelligent Data Analysis for HR
 *
 * # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.
 *
 * The version of the OpenAPI document: 2.28194
 * Contact: info@intervieweb.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UniversityData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UniversityData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UniversityData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'overview' => '\OpenAPI\Client\Model\Overview',
        'location' => '\OpenAPI\Client\Model\UniversityLocationsLocation',
        'other_locations' => '\OpenAPI\Client\Model\UniversityLocationsLocation[]',
        'contact_info' => '\OpenAPI\Client\Model\UniversityContactsContactInfo',
        'accreditations' => '\OpenAPI\Client\Model\OptionalAccreditations',
        'admissions' => '\OpenAPI\Client\Model\OptionalAdmissions',
        'carnegie_classification' => '\OpenAPI\Client\Model\OptionalCarnegieClassification',
        'facilities_and_services' => '\OpenAPI\Client\Model\OptionalFacilitiesAndServices',
        'faculties' => 'string[]',
        'memberships_and_affiliations' => 'string[]',
        'yearly_tuition_range' => '\OpenAPI\Client\Model\OptionalTuition[]',
        'size_and_profile' => '\OpenAPI\Client\Model\OptionalSizeAndProfile',
        'study_areas' => '\OpenAPI\Client\Model\StudyAreas[]',
        'logo' => '\OpenAPI\Client\Model\ValueModelBytes'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'overview' => null,
        'location' => null,
        'other_locations' => null,
        'contact_info' => null,
        'accreditations' => null,
        'admissions' => null,
        'carnegie_classification' => null,
        'facilities_and_services' => null,
        'faculties' => null,
        'memberships_and_affiliations' => null,
        'yearly_tuition_range' => null,
        'size_and_profile' => null,
        'study_areas' => null,
        'logo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overview' => 'Overview',
        'location' => 'Location',
        'other_locations' => 'OtherLocations',
        'contact_info' => 'ContactInfo',
        'accreditations' => 'Accreditations',
        'admissions' => 'Admissions',
        'carnegie_classification' => 'CarnegieClassification',
        'facilities_and_services' => 'FacilitiesAndServices',
        'faculties' => 'Faculties',
        'memberships_and_affiliations' => 'MembershipsAndAffiliations',
        'yearly_tuition_range' => 'YearlyTuitionRange',
        'size_and_profile' => 'SizeAndProfile',
        'study_areas' => 'StudyAreas',
        'logo' => 'Logo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overview' => 'setOverview',
        'location' => 'setLocation',
        'other_locations' => 'setOtherLocations',
        'contact_info' => 'setContactInfo',
        'accreditations' => 'setAccreditations',
        'admissions' => 'setAdmissions',
        'carnegie_classification' => 'setCarnegieClassification',
        'facilities_and_services' => 'setFacilitiesAndServices',
        'faculties' => 'setFaculties',
        'memberships_and_affiliations' => 'setMembershipsAndAffiliations',
        'yearly_tuition_range' => 'setYearlyTuitionRange',
        'size_and_profile' => 'setSizeAndProfile',
        'study_areas' => 'setStudyAreas',
        'logo' => 'setLogo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overview' => 'getOverview',
        'location' => 'getLocation',
        'other_locations' => 'getOtherLocations',
        'contact_info' => 'getContactInfo',
        'accreditations' => 'getAccreditations',
        'admissions' => 'getAdmissions',
        'carnegie_classification' => 'getCarnegieClassification',
        'facilities_and_services' => 'getFacilitiesAndServices',
        'faculties' => 'getFaculties',
        'memberships_and_affiliations' => 'getMembershipsAndAffiliations',
        'yearly_tuition_range' => 'getYearlyTuitionRange',
        'size_and_profile' => 'getSizeAndProfile',
        'study_areas' => 'getStudyAreas',
        'logo' => 'getLogo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overview'] = $data['overview'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['other_locations'] = $data['other_locations'] ?? null;
        $this->container['contact_info'] = $data['contact_info'] ?? null;
        $this->container['accreditations'] = $data['accreditations'] ?? null;
        $this->container['admissions'] = $data['admissions'] ?? null;
        $this->container['carnegie_classification'] = $data['carnegie_classification'] ?? null;
        $this->container['facilities_and_services'] = $data['facilities_and_services'] ?? null;
        $this->container['faculties'] = $data['faculties'] ?? null;
        $this->container['memberships_and_affiliations'] = $data['memberships_and_affiliations'] ?? null;
        $this->container['yearly_tuition_range'] = $data['yearly_tuition_range'] ?? null;
        $this->container['size_and_profile'] = $data['size_and_profile'] ?? null;
        $this->container['study_areas'] = $data['study_areas'] ?? null;
        $this->container['logo'] = $data['logo'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['overview'] === null) {
            $invalidProperties[] = "'overview' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overview
     *
     * @return \OpenAPI\Client\Model\Overview
     */
    public function getOverview()
    {
        return $this->container['overview'];
    }

    /**
     * Sets overview
     *
     * @param \OpenAPI\Client\Model\Overview $overview overview
     *
     * @return self
     */
    public function setOverview($overview)
    {
        $this->container['overview'] = $overview;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\UniversityLocationsLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\UniversityLocationsLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets other_locations
     *
     * @return \OpenAPI\Client\Model\UniversityLocationsLocation[]|null
     */
    public function getOtherLocations()
    {
        return $this->container['other_locations'];
    }

    /**
     * Sets other_locations
     *
     * @param \OpenAPI\Client\Model\UniversityLocationsLocation[]|null $other_locations University's branches locations.
     *
     * @return self
     */
    public function setOtherLocations($other_locations)
    {
        $this->container['other_locations'] = $other_locations;

        return $this;
    }

    /**
     * Gets contact_info
     *
     * @return \OpenAPI\Client\Model\UniversityContactsContactInfo|null
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     *
     * @param \OpenAPI\Client\Model\UniversityContactsContactInfo|null $contact_info contact_info
     *
     * @return self
     */
    public function setContactInfo($contact_info)
    {
        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets accreditations
     *
     * @return \OpenAPI\Client\Model\OptionalAccreditations|null
     */
    public function getAccreditations()
    {
        return $this->container['accreditations'];
    }

    /**
     * Sets accreditations
     *
     * @param \OpenAPI\Client\Model\OptionalAccreditations|null $accreditations accreditations
     *
     * @return self
     */
    public function setAccreditations($accreditations)
    {
        $this->container['accreditations'] = $accreditations;

        return $this;
    }

    /**
     * Gets admissions
     *
     * @return \OpenAPI\Client\Model\OptionalAdmissions|null
     */
    public function getAdmissions()
    {
        return $this->container['admissions'];
    }

    /**
     * Sets admissions
     *
     * @param \OpenAPI\Client\Model\OptionalAdmissions|null $admissions admissions
     *
     * @return self
     */
    public function setAdmissions($admissions)
    {
        $this->container['admissions'] = $admissions;

        return $this;
    }

    /**
     * Gets carnegie_classification
     *
     * @return \OpenAPI\Client\Model\OptionalCarnegieClassification|null
     */
    public function getCarnegieClassification()
    {
        return $this->container['carnegie_classification'];
    }

    /**
     * Sets carnegie_classification
     *
     * @param \OpenAPI\Client\Model\OptionalCarnegieClassification|null $carnegie_classification carnegie_classification
     *
     * @return self
     */
    public function setCarnegieClassification($carnegie_classification)
    {
        $this->container['carnegie_classification'] = $carnegie_classification;

        return $this;
    }

    /**
     * Gets facilities_and_services
     *
     * @return \OpenAPI\Client\Model\OptionalFacilitiesAndServices|null
     */
    public function getFacilitiesAndServices()
    {
        return $this->container['facilities_and_services'];
    }

    /**
     * Sets facilities_and_services
     *
     * @param \OpenAPI\Client\Model\OptionalFacilitiesAndServices|null $facilities_and_services facilities_and_services
     *
     * @return self
     */
    public function setFacilitiesAndServices($facilities_and_services)
    {
        $this->container['facilities_and_services'] = $facilities_and_services;

        return $this;
    }

    /**
     * Gets faculties
     *
     * @return string[]|null
     */
    public function getFaculties()
    {
        return $this->container['faculties'];
    }

    /**
     * Sets faculties
     *
     * @param string[]|null $faculties List of available faculties.
     *
     * @return self
     */
    public function setFaculties($faculties)
    {
        $this->container['faculties'] = $faculties;

        return $this;
    }

    /**
     * Gets memberships_and_affiliations
     *
     * @return string[]|null
     */
    public function getMembershipsAndAffiliations()
    {
        return $this->container['memberships_and_affiliations'];
    }

    /**
     * Sets memberships_and_affiliations
     *
     * @param string[]|null $memberships_and_affiliations List of University's memberships and affiliations.
     *
     * @return self
     */
    public function setMembershipsAndAffiliations($memberships_and_affiliations)
    {
        $this->container['memberships_and_affiliations'] = $memberships_and_affiliations;

        return $this;
    }

    /**
     * Gets yearly_tuition_range
     *
     * @return \OpenAPI\Client\Model\OptionalTuition[]|null
     */
    public function getYearlyTuitionRange()
    {
        return $this->container['yearly_tuition_range'];
    }

    /**
     * Sets yearly_tuition_range
     *
     * @param \OpenAPI\Client\Model\OptionalTuition[]|null $yearly_tuition_range List of indicative tuition ranges for local/international students and undergraduate/postgraduate students.
     *
     * @return self
     */
    public function setYearlyTuitionRange($yearly_tuition_range)
    {
        $this->container['yearly_tuition_range'] = $yearly_tuition_range;

        return $this;
    }

    /**
     * Gets size_and_profile
     *
     * @return \OpenAPI\Client\Model\OptionalSizeAndProfile|null
     */
    public function getSizeAndProfile()
    {
        return $this->container['size_and_profile'];
    }

    /**
     * Sets size_and_profile
     *
     * @param \OpenAPI\Client\Model\OptionalSizeAndProfile|null $size_and_profile size_and_profile
     *
     * @return self
     */
    public function setSizeAndProfile($size_and_profile)
    {
        $this->container['size_and_profile'] = $size_and_profile;

        return $this;
    }

    /**
     * Gets study_areas
     *
     * @return \OpenAPI\Client\Model\StudyAreas[]|null
     */
    public function getStudyAreas()
    {
        return $this->container['study_areas'];
    }

    /**
     * Sets study_areas
     *
     * @param \OpenAPI\Client\Model\StudyAreas[]|null $study_areas General overview of the University's academic offer.
     *
     * @return self
     */
    public function setStudyAreas($study_areas)
    {
        $this->container['study_areas'] = $study_areas;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \OpenAPI\Client\Model\ValueModelBytes|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \OpenAPI\Client\Model\ValueModelBytes|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


