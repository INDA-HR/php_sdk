<?php
/**
 * OptionalPhoneNumber
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * INDA HR - INtelligent Data Analysis for HR
 *
 * # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.
 *
 * The version of the OpenAPI document: 2.28194
 * Contact: info@intervieweb.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OptionalPhoneNumber Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OptionalPhoneNumber implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OptionalPhoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country_code' => 'string',
        'country_dialling' => 'string',
        'dial_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country_code' => null,
        'country_dialling' => null,
        'dial_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_code' => 'CountryCode',
        'country_dialling' => 'CountryDialling',
        'dial_number' => 'DialNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_code' => 'setCountryCode',
        'country_dialling' => 'setCountryDialling',
        'dial_number' => 'setDialNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_code' => 'getCountryCode',
        'country_dialling' => 'getCountryDialling',
        'dial_number' => 'getDialNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const COUNTRY_CODE_AW = 'AW';
    const COUNTRY_CODE_AF = 'AF';
    const COUNTRY_CODE_AO = 'AO';
    const COUNTRY_CODE_AI = 'AI';
    const COUNTRY_CODE_AX = 'AX';
    const COUNTRY_CODE_AL = 'AL';
    const COUNTRY_CODE_AD = 'AD';
    const COUNTRY_CODE_AE = 'AE';
    const COUNTRY_CODE_AR = 'AR';
    const COUNTRY_CODE_AM = 'AM';
    const COUNTRY_CODE__AS = 'AS';
    const COUNTRY_CODE_AQ = 'AQ';
    const COUNTRY_CODE_TF = 'TF';
    const COUNTRY_CODE_AG = 'AG';
    const COUNTRY_CODE_AU = 'AU';
    const COUNTRY_CODE_AT = 'AT';
    const COUNTRY_CODE_AZ = 'AZ';
    const COUNTRY_CODE_BI = 'BI';
    const COUNTRY_CODE_BE = 'BE';
    const COUNTRY_CODE_BJ = 'BJ';
    const COUNTRY_CODE_BQ = 'BQ';
    const COUNTRY_CODE_BF = 'BF';
    const COUNTRY_CODE_BD = 'BD';
    const COUNTRY_CODE_BG = 'BG';
    const COUNTRY_CODE_BH = 'BH';
    const COUNTRY_CODE_BS = 'BS';
    const COUNTRY_CODE_BA = 'BA';
    const COUNTRY_CODE_BL = 'BL';
    const COUNTRY_CODE_BY = 'BY';
    const COUNTRY_CODE_BZ = 'BZ';
    const COUNTRY_CODE_BM = 'BM';
    const COUNTRY_CODE_BO = 'BO';
    const COUNTRY_CODE_BR = 'BR';
    const COUNTRY_CODE_BB = 'BB';
    const COUNTRY_CODE_BN = 'BN';
    const COUNTRY_CODE_BT = 'BT';
    const COUNTRY_CODE_BV = 'BV';
    const COUNTRY_CODE_BW = 'BW';
    const COUNTRY_CODE_CF = 'CF';
    const COUNTRY_CODE_CA = 'CA';
    const COUNTRY_CODE_CC = 'CC';
    const COUNTRY_CODE_CH = 'CH';
    const COUNTRY_CODE_CL = 'CL';
    const COUNTRY_CODE_CN = 'CN';
    const COUNTRY_CODE_CI = 'CI';
    const COUNTRY_CODE_CM = 'CM';
    const COUNTRY_CODE_CD = 'CD';
    const COUNTRY_CODE_CG = 'CG';
    const COUNTRY_CODE_CK = 'CK';
    const COUNTRY_CODE_CO = 'CO';
    const COUNTRY_CODE_KM = 'KM';
    const COUNTRY_CODE_CV = 'CV';
    const COUNTRY_CODE_CR = 'CR';
    const COUNTRY_CODE_CU = 'CU';
    const COUNTRY_CODE_CW = 'CW';
    const COUNTRY_CODE_CX = 'CX';
    const COUNTRY_CODE_KY = 'KY';
    const COUNTRY_CODE_CY = 'CY';
    const COUNTRY_CODE_CZ = 'CZ';
    const COUNTRY_CODE_DE = 'DE';
    const COUNTRY_CODE_DJ = 'DJ';
    const COUNTRY_CODE_DM = 'DM';
    const COUNTRY_CODE_DK = 'DK';
    const COUNTRY_CODE__DO = 'DO';
    const COUNTRY_CODE_DZ = 'DZ';
    const COUNTRY_CODE_EC = 'EC';
    const COUNTRY_CODE_EG = 'EG';
    const COUNTRY_CODE_ER = 'ER';
    const COUNTRY_CODE_EH = 'EH';
    const COUNTRY_CODE_ES = 'ES';
    const COUNTRY_CODE_EE = 'EE';
    const COUNTRY_CODE_ET = 'ET';
    const COUNTRY_CODE_FI = 'FI';
    const COUNTRY_CODE_FJ = 'FJ';
    const COUNTRY_CODE_FK = 'FK';
    const COUNTRY_CODE_FR = 'FR';
    const COUNTRY_CODE_FO = 'FO';
    const COUNTRY_CODE_FM = 'FM';
    const COUNTRY_CODE_GA = 'GA';
    const COUNTRY_CODE_GB = 'GB';
    const COUNTRY_CODE_GE = 'GE';
    const COUNTRY_CODE_GG = 'GG';
    const COUNTRY_CODE_GH = 'GH';
    const COUNTRY_CODE_GI = 'GI';
    const COUNTRY_CODE_GN = 'GN';
    const COUNTRY_CODE_GP = 'GP';
    const COUNTRY_CODE_GM = 'GM';
    const COUNTRY_CODE_GW = 'GW';
    const COUNTRY_CODE_GQ = 'GQ';
    const COUNTRY_CODE_GR = 'GR';
    const COUNTRY_CODE_GD = 'GD';
    const COUNTRY_CODE_GL = 'GL';
    const COUNTRY_CODE_GT = 'GT';
    const COUNTRY_CODE_GF = 'GF';
    const COUNTRY_CODE_GU = 'GU';
    const COUNTRY_CODE_GY = 'GY';
    const COUNTRY_CODE_HK = 'HK';
    const COUNTRY_CODE_HM = 'HM';
    const COUNTRY_CODE_HN = 'HN';
    const COUNTRY_CODE_HR = 'HR';
    const COUNTRY_CODE_HT = 'HT';
    const COUNTRY_CODE_HU = 'HU';
    const COUNTRY_CODE_ID = 'ID';
    const COUNTRY_CODE_IM = 'IM';
    const COUNTRY_CODE_IN = 'IN';
    const COUNTRY_CODE_IO = 'IO';
    const COUNTRY_CODE_IE = 'IE';
    const COUNTRY_CODE_IR = 'IR';
    const COUNTRY_CODE_IQ = 'IQ';
    const COUNTRY_CODE_IS = 'IS';
    const COUNTRY_CODE_IL = 'IL';
    const COUNTRY_CODE_IT = 'IT';
    const COUNTRY_CODE_JM = 'JM';
    const COUNTRY_CODE_JE = 'JE';
    const COUNTRY_CODE_JO = 'JO';
    const COUNTRY_CODE_JP = 'JP';
    const COUNTRY_CODE_KZ = 'KZ';
    const COUNTRY_CODE_KE = 'KE';
    const COUNTRY_CODE_KG = 'KG';
    const COUNTRY_CODE_KH = 'KH';
    const COUNTRY_CODE_KI = 'KI';
    const COUNTRY_CODE_KN = 'KN';
    const COUNTRY_CODE_KR = 'KR';
    const COUNTRY_CODE_KW = 'KW';
    const COUNTRY_CODE_LA = 'LA';
    const COUNTRY_CODE_LB = 'LB';
    const COUNTRY_CODE_LR = 'LR';
    const COUNTRY_CODE_LY = 'LY';
    const COUNTRY_CODE_LC = 'LC';
    const COUNTRY_CODE_LI = 'LI';
    const COUNTRY_CODE_LK = 'LK';
    const COUNTRY_CODE_LS = 'LS';
    const COUNTRY_CODE_LT = 'LT';
    const COUNTRY_CODE_LU = 'LU';
    const COUNTRY_CODE_LV = 'LV';
    const COUNTRY_CODE_MO = 'MO';
    const COUNTRY_CODE_MF = 'MF';
    const COUNTRY_CODE_MA = 'MA';
    const COUNTRY_CODE_MC = 'MC';
    const COUNTRY_CODE_MD = 'MD';
    const COUNTRY_CODE_MG = 'MG';
    const COUNTRY_CODE_MV = 'MV';
    const COUNTRY_CODE_MX = 'MX';
    const COUNTRY_CODE_MH = 'MH';
    const COUNTRY_CODE_MK = 'MK';
    const COUNTRY_CODE_ML = 'ML';
    const COUNTRY_CODE_MT = 'MT';
    const COUNTRY_CODE_MM = 'MM';
    const COUNTRY_CODE_ME = 'ME';
    const COUNTRY_CODE_MN = 'MN';
    const COUNTRY_CODE_MP = 'MP';
    const COUNTRY_CODE_MZ = 'MZ';
    const COUNTRY_CODE_MR = 'MR';
    const COUNTRY_CODE_MS = 'MS';
    const COUNTRY_CODE_MQ = 'MQ';
    const COUNTRY_CODE_MU = 'MU';
    const COUNTRY_CODE_MW = 'MW';
    const COUNTRY_CODE_MY = 'MY';
    const COUNTRY_CODE_YT = 'YT';
    const COUNTRY_CODE_NA = 'NA';
    const COUNTRY_CODE_NC = 'NC';
    const COUNTRY_CODE_NE = 'NE';
    const COUNTRY_CODE_NF = 'NF';
    const COUNTRY_CODE_NG = 'NG';
    const COUNTRY_CODE_NI = 'NI';
    const COUNTRY_CODE_NU = 'NU';
    const COUNTRY_CODE_NL = 'NL';
    const COUNTRY_CODE_NO = 'NO';
    const COUNTRY_CODE_NP = 'NP';
    const COUNTRY_CODE_NR = 'NR';
    const COUNTRY_CODE_NZ = 'NZ';
    const COUNTRY_CODE_OM = 'OM';
    const COUNTRY_CODE_PK = 'PK';
    const COUNTRY_CODE_PA = 'PA';
    const COUNTRY_CODE_PN = 'PN';
    const COUNTRY_CODE_PE = 'PE';
    const COUNTRY_CODE_PH = 'PH';
    const COUNTRY_CODE_PW = 'PW';
    const COUNTRY_CODE_PG = 'PG';
    const COUNTRY_CODE_PL = 'PL';
    const COUNTRY_CODE_PR = 'PR';
    const COUNTRY_CODE_KP = 'KP';
    const COUNTRY_CODE_PT = 'PT';
    const COUNTRY_CODE_PY = 'PY';
    const COUNTRY_CODE_PS = 'PS';
    const COUNTRY_CODE_PF = 'PF';
    const COUNTRY_CODE_QA = 'QA';
    const COUNTRY_CODE_RE = 'RE';
    const COUNTRY_CODE_RO = 'RO';
    const COUNTRY_CODE_RU = 'RU';
    const COUNTRY_CODE_RW = 'RW';
    const COUNTRY_CODE_SA = 'SA';
    const COUNTRY_CODE_SD = 'SD';
    const COUNTRY_CODE_SN = 'SN';
    const COUNTRY_CODE_SG = 'SG';
    const COUNTRY_CODE_GS = 'GS';
    const COUNTRY_CODE_SH = 'SH';
    const COUNTRY_CODE_SJ = 'SJ';
    const COUNTRY_CODE_SB = 'SB';
    const COUNTRY_CODE_SL = 'SL';
    const COUNTRY_CODE_SV = 'SV';
    const COUNTRY_CODE_SM = 'SM';
    const COUNTRY_CODE_SO = 'SO';
    const COUNTRY_CODE_PM = 'PM';
    const COUNTRY_CODE_RS = 'RS';
    const COUNTRY_CODE_SS = 'SS';
    const COUNTRY_CODE_ST = 'ST';
    const COUNTRY_CODE_SR = 'SR';
    const COUNTRY_CODE_SK = 'SK';
    const COUNTRY_CODE_SI = 'SI';
    const COUNTRY_CODE_SE = 'SE';
    const COUNTRY_CODE_SZ = 'SZ';
    const COUNTRY_CODE_SX = 'SX';
    const COUNTRY_CODE_SC = 'SC';
    const COUNTRY_CODE_SY = 'SY';
    const COUNTRY_CODE_TC = 'TC';
    const COUNTRY_CODE_TD = 'TD';
    const COUNTRY_CODE_TG = 'TG';
    const COUNTRY_CODE_TH = 'TH';
    const COUNTRY_CODE_TJ = 'TJ';
    const COUNTRY_CODE_TK = 'TK';
    const COUNTRY_CODE_TM = 'TM';
    const COUNTRY_CODE_TL = 'TL';
    const COUNTRY_CODE_TO = 'TO';
    const COUNTRY_CODE_TT = 'TT';
    const COUNTRY_CODE_TN = 'TN';
    const COUNTRY_CODE_TR = 'TR';
    const COUNTRY_CODE_TV = 'TV';
    const COUNTRY_CODE_TW = 'TW';
    const COUNTRY_CODE_TZ = 'TZ';
    const COUNTRY_CODE_UG = 'UG';
    const COUNTRY_CODE_UA = 'UA';
    const COUNTRY_CODE_UM = 'UM';
    const COUNTRY_CODE_UY = 'UY';
    const COUNTRY_CODE_US = 'US';
    const COUNTRY_CODE_UZ = 'UZ';
    const COUNTRY_CODE_VA = 'VA';
    const COUNTRY_CODE_VC = 'VC';
    const COUNTRY_CODE_VE = 'VE';
    const COUNTRY_CODE_VG = 'VG';
    const COUNTRY_CODE_VI = 'VI';
    const COUNTRY_CODE_VN = 'VN';
    const COUNTRY_CODE_VU = 'VU';
    const COUNTRY_CODE_WF = 'WF';
    const COUNTRY_CODE_WS = 'WS';
    const COUNTRY_CODE_YE = 'YE';
    const COUNTRY_CODE_ZA = 'ZA';
    const COUNTRY_CODE_ZM = 'ZM';
    const COUNTRY_CODE_ZW = 'ZW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryCodeAllowableValues()
    {
        return [
            self::COUNTRY_CODE_AW,
            self::COUNTRY_CODE_AF,
            self::COUNTRY_CODE_AO,
            self::COUNTRY_CODE_AI,
            self::COUNTRY_CODE_AX,
            self::COUNTRY_CODE_AL,
            self::COUNTRY_CODE_AD,
            self::COUNTRY_CODE_AE,
            self::COUNTRY_CODE_AR,
            self::COUNTRY_CODE_AM,
            self::COUNTRY_CODE__AS,
            self::COUNTRY_CODE_AQ,
            self::COUNTRY_CODE_TF,
            self::COUNTRY_CODE_AG,
            self::COUNTRY_CODE_AU,
            self::COUNTRY_CODE_AT,
            self::COUNTRY_CODE_AZ,
            self::COUNTRY_CODE_BI,
            self::COUNTRY_CODE_BE,
            self::COUNTRY_CODE_BJ,
            self::COUNTRY_CODE_BQ,
            self::COUNTRY_CODE_BF,
            self::COUNTRY_CODE_BD,
            self::COUNTRY_CODE_BG,
            self::COUNTRY_CODE_BH,
            self::COUNTRY_CODE_BS,
            self::COUNTRY_CODE_BA,
            self::COUNTRY_CODE_BL,
            self::COUNTRY_CODE_BY,
            self::COUNTRY_CODE_BZ,
            self::COUNTRY_CODE_BM,
            self::COUNTRY_CODE_BO,
            self::COUNTRY_CODE_BR,
            self::COUNTRY_CODE_BB,
            self::COUNTRY_CODE_BN,
            self::COUNTRY_CODE_BT,
            self::COUNTRY_CODE_BV,
            self::COUNTRY_CODE_BW,
            self::COUNTRY_CODE_CF,
            self::COUNTRY_CODE_CA,
            self::COUNTRY_CODE_CC,
            self::COUNTRY_CODE_CH,
            self::COUNTRY_CODE_CL,
            self::COUNTRY_CODE_CN,
            self::COUNTRY_CODE_CI,
            self::COUNTRY_CODE_CM,
            self::COUNTRY_CODE_CD,
            self::COUNTRY_CODE_CG,
            self::COUNTRY_CODE_CK,
            self::COUNTRY_CODE_CO,
            self::COUNTRY_CODE_KM,
            self::COUNTRY_CODE_CV,
            self::COUNTRY_CODE_CR,
            self::COUNTRY_CODE_CU,
            self::COUNTRY_CODE_CW,
            self::COUNTRY_CODE_CX,
            self::COUNTRY_CODE_KY,
            self::COUNTRY_CODE_CY,
            self::COUNTRY_CODE_CZ,
            self::COUNTRY_CODE_DE,
            self::COUNTRY_CODE_DJ,
            self::COUNTRY_CODE_DM,
            self::COUNTRY_CODE_DK,
            self::COUNTRY_CODE__DO,
            self::COUNTRY_CODE_DZ,
            self::COUNTRY_CODE_EC,
            self::COUNTRY_CODE_EG,
            self::COUNTRY_CODE_ER,
            self::COUNTRY_CODE_EH,
            self::COUNTRY_CODE_ES,
            self::COUNTRY_CODE_EE,
            self::COUNTRY_CODE_ET,
            self::COUNTRY_CODE_FI,
            self::COUNTRY_CODE_FJ,
            self::COUNTRY_CODE_FK,
            self::COUNTRY_CODE_FR,
            self::COUNTRY_CODE_FO,
            self::COUNTRY_CODE_FM,
            self::COUNTRY_CODE_GA,
            self::COUNTRY_CODE_GB,
            self::COUNTRY_CODE_GE,
            self::COUNTRY_CODE_GG,
            self::COUNTRY_CODE_GH,
            self::COUNTRY_CODE_GI,
            self::COUNTRY_CODE_GN,
            self::COUNTRY_CODE_GP,
            self::COUNTRY_CODE_GM,
            self::COUNTRY_CODE_GW,
            self::COUNTRY_CODE_GQ,
            self::COUNTRY_CODE_GR,
            self::COUNTRY_CODE_GD,
            self::COUNTRY_CODE_GL,
            self::COUNTRY_CODE_GT,
            self::COUNTRY_CODE_GF,
            self::COUNTRY_CODE_GU,
            self::COUNTRY_CODE_GY,
            self::COUNTRY_CODE_HK,
            self::COUNTRY_CODE_HM,
            self::COUNTRY_CODE_HN,
            self::COUNTRY_CODE_HR,
            self::COUNTRY_CODE_HT,
            self::COUNTRY_CODE_HU,
            self::COUNTRY_CODE_ID,
            self::COUNTRY_CODE_IM,
            self::COUNTRY_CODE_IN,
            self::COUNTRY_CODE_IO,
            self::COUNTRY_CODE_IE,
            self::COUNTRY_CODE_IR,
            self::COUNTRY_CODE_IQ,
            self::COUNTRY_CODE_IS,
            self::COUNTRY_CODE_IL,
            self::COUNTRY_CODE_IT,
            self::COUNTRY_CODE_JM,
            self::COUNTRY_CODE_JE,
            self::COUNTRY_CODE_JO,
            self::COUNTRY_CODE_JP,
            self::COUNTRY_CODE_KZ,
            self::COUNTRY_CODE_KE,
            self::COUNTRY_CODE_KG,
            self::COUNTRY_CODE_KH,
            self::COUNTRY_CODE_KI,
            self::COUNTRY_CODE_KN,
            self::COUNTRY_CODE_KR,
            self::COUNTRY_CODE_KW,
            self::COUNTRY_CODE_LA,
            self::COUNTRY_CODE_LB,
            self::COUNTRY_CODE_LR,
            self::COUNTRY_CODE_LY,
            self::COUNTRY_CODE_LC,
            self::COUNTRY_CODE_LI,
            self::COUNTRY_CODE_LK,
            self::COUNTRY_CODE_LS,
            self::COUNTRY_CODE_LT,
            self::COUNTRY_CODE_LU,
            self::COUNTRY_CODE_LV,
            self::COUNTRY_CODE_MO,
            self::COUNTRY_CODE_MF,
            self::COUNTRY_CODE_MA,
            self::COUNTRY_CODE_MC,
            self::COUNTRY_CODE_MD,
            self::COUNTRY_CODE_MG,
            self::COUNTRY_CODE_MV,
            self::COUNTRY_CODE_MX,
            self::COUNTRY_CODE_MH,
            self::COUNTRY_CODE_MK,
            self::COUNTRY_CODE_ML,
            self::COUNTRY_CODE_MT,
            self::COUNTRY_CODE_MM,
            self::COUNTRY_CODE_ME,
            self::COUNTRY_CODE_MN,
            self::COUNTRY_CODE_MP,
            self::COUNTRY_CODE_MZ,
            self::COUNTRY_CODE_MR,
            self::COUNTRY_CODE_MS,
            self::COUNTRY_CODE_MQ,
            self::COUNTRY_CODE_MU,
            self::COUNTRY_CODE_MW,
            self::COUNTRY_CODE_MY,
            self::COUNTRY_CODE_YT,
            self::COUNTRY_CODE_NA,
            self::COUNTRY_CODE_NC,
            self::COUNTRY_CODE_NE,
            self::COUNTRY_CODE_NF,
            self::COUNTRY_CODE_NG,
            self::COUNTRY_CODE_NI,
            self::COUNTRY_CODE_NU,
            self::COUNTRY_CODE_NL,
            self::COUNTRY_CODE_NO,
            self::COUNTRY_CODE_NP,
            self::COUNTRY_CODE_NR,
            self::COUNTRY_CODE_NZ,
            self::COUNTRY_CODE_OM,
            self::COUNTRY_CODE_PK,
            self::COUNTRY_CODE_PA,
            self::COUNTRY_CODE_PN,
            self::COUNTRY_CODE_PE,
            self::COUNTRY_CODE_PH,
            self::COUNTRY_CODE_PW,
            self::COUNTRY_CODE_PG,
            self::COUNTRY_CODE_PL,
            self::COUNTRY_CODE_PR,
            self::COUNTRY_CODE_KP,
            self::COUNTRY_CODE_PT,
            self::COUNTRY_CODE_PY,
            self::COUNTRY_CODE_PS,
            self::COUNTRY_CODE_PF,
            self::COUNTRY_CODE_QA,
            self::COUNTRY_CODE_RE,
            self::COUNTRY_CODE_RO,
            self::COUNTRY_CODE_RU,
            self::COUNTRY_CODE_RW,
            self::COUNTRY_CODE_SA,
            self::COUNTRY_CODE_SD,
            self::COUNTRY_CODE_SN,
            self::COUNTRY_CODE_SG,
            self::COUNTRY_CODE_GS,
            self::COUNTRY_CODE_SH,
            self::COUNTRY_CODE_SJ,
            self::COUNTRY_CODE_SB,
            self::COUNTRY_CODE_SL,
            self::COUNTRY_CODE_SV,
            self::COUNTRY_CODE_SM,
            self::COUNTRY_CODE_SO,
            self::COUNTRY_CODE_PM,
            self::COUNTRY_CODE_RS,
            self::COUNTRY_CODE_SS,
            self::COUNTRY_CODE_ST,
            self::COUNTRY_CODE_SR,
            self::COUNTRY_CODE_SK,
            self::COUNTRY_CODE_SI,
            self::COUNTRY_CODE_SE,
            self::COUNTRY_CODE_SZ,
            self::COUNTRY_CODE_SX,
            self::COUNTRY_CODE_SC,
            self::COUNTRY_CODE_SY,
            self::COUNTRY_CODE_TC,
            self::COUNTRY_CODE_TD,
            self::COUNTRY_CODE_TG,
            self::COUNTRY_CODE_TH,
            self::COUNTRY_CODE_TJ,
            self::COUNTRY_CODE_TK,
            self::COUNTRY_CODE_TM,
            self::COUNTRY_CODE_TL,
            self::COUNTRY_CODE_TO,
            self::COUNTRY_CODE_TT,
            self::COUNTRY_CODE_TN,
            self::COUNTRY_CODE_TR,
            self::COUNTRY_CODE_TV,
            self::COUNTRY_CODE_TW,
            self::COUNTRY_CODE_TZ,
            self::COUNTRY_CODE_UG,
            self::COUNTRY_CODE_UA,
            self::COUNTRY_CODE_UM,
            self::COUNTRY_CODE_UY,
            self::COUNTRY_CODE_US,
            self::COUNTRY_CODE_UZ,
            self::COUNTRY_CODE_VA,
            self::COUNTRY_CODE_VC,
            self::COUNTRY_CODE_VE,
            self::COUNTRY_CODE_VG,
            self::COUNTRY_CODE_VI,
            self::COUNTRY_CODE_VN,
            self::COUNTRY_CODE_VU,
            self::COUNTRY_CODE_WF,
            self::COUNTRY_CODE_WS,
            self::COUNTRY_CODE_YE,
            self::COUNTRY_CODE_ZA,
            self::COUNTRY_CODE_ZM,
            self::COUNTRY_CODE_ZW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['country_dialling'] = $data['country_dialling'] ?? null;
        $this->container['dial_number'] = $data['dial_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCountryCodeAllowableValues();
        if (!is_null($this->container['country_code']) && !in_array($this->container['country_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'country_code', must be one of '%s'",
                $this->container['country_code'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code Country code - ISO 3166.
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $allowedValues = $this->getCountryCodeAllowableValues();
        if (!is_null($country_code) && !in_array($country_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'country_code', must be one of '%s'",
                    $country_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets country_dialling
     *
     * @return string|null
     */
    public function getCountryDialling()
    {
        return $this->container['country_dialling'];
    }

    /**
     * Sets country_dialling
     *
     * @param string|null $country_dialling Country calling code.
     *
     * @return self
     */
    public function setCountryDialling($country_dialling)
    {
        $this->container['country_dialling'] = $country_dialling;

        return $this;
    }

    /**
     * Gets dial_number
     *
     * @return string|null
     */
    public function getDialNumber()
    {
        return $this->container['dial_number'];
    }

    /**
     * Sets dial_number
     *
     * @param string|null $dial_number Dial number.
     *
     * @return self
     */
    public function setDialNumber($dial_number)
    {
        $this->container['dial_number'] = $dial_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


