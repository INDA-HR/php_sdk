<?php
/**
 * ResumeCommonData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * INDA HR - INtelligent Data Analysis for HR
 *
 * # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResumeCommonData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResumeCommonData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResumeCommonData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_title' => '\OpenAPI\Client\Model\OptionalResumeJobTitle',
        'personal_info' => '\OpenAPI\Client\Model\PersonalInfo',
        'contact_info' => '\OpenAPI\Client\Model\ResumeContactInfoContactInfo',
        'person_location' => '\OpenAPI\Client\Model\PersonLocation',
        'headline' => '\OpenAPI\Client\Model\Text',
        'education_experiences' => '\OpenAPI\Client\Model\EducationExperience[]',
        'work_experiences' => '\OpenAPI\Client\Model\WorkExperience[]',
        'cover_letter' => '\OpenAPI\Client\Model\Text',
        'references' => '\OpenAPI\Client\Model\Reference[]',
        'profile_summary' => '\OpenAPI\Client\Model\ProfileSummary',
        'skills' => '\OpenAPI\Client\Model\OptionalResumeSkill[]',
        'job_titles' => '\OpenAPI\Client\Model\OptionalResumeJobTitle[]',
        'languages' => '\OpenAPI\Client\Model\OptionalResumeLanguage[]',
        'certifications' => '\OpenAPI\Client\Model\Certification[]',
        'publications' => '\OpenAPI\Client\Model\Publication[]',
        'awards' => '\OpenAPI\Client\Model\Award[]',
        'projects' => '\OpenAPI\Client\Model\Project[]',
        'achievements' => '\OpenAPI\Client\Model\Achievement[]',
        'patents' => '\OpenAPI\Client\Model\Patent[]',
        'hobbies_and_interests' => '\OpenAPI\Client\Model\Text[]',
        'licenses' => '\OpenAPI\Client\Model\License[]',
        'volunteering' => '\OpenAPI\Client\Model\Event[]',
        'conference_and_seminars' => '\OpenAPI\Client\Model\Event[]',
        'military_history' => '\OpenAPI\Client\Model\MilitaryService[]',
        'others' => '\OpenAPI\Client\Model\Other[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_title' => null,
        'personal_info' => null,
        'contact_info' => null,
        'person_location' => null,
        'headline' => null,
        'education_experiences' => null,
        'work_experiences' => null,
        'cover_letter' => null,
        'references' => null,
        'profile_summary' => null,
        'skills' => null,
        'job_titles' => null,
        'languages' => null,
        'certifications' => null,
        'publications' => null,
        'awards' => null,
        'projects' => null,
        'achievements' => null,
        'patents' => null,
        'hobbies_and_interests' => null,
        'licenses' => null,
        'volunteering' => null,
        'conference_and_seminars' => null,
        'military_history' => null,
        'others' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_title' => 'JobTitle',
        'personal_info' => 'PersonalInfo',
        'contact_info' => 'ContactInfo',
        'person_location' => 'PersonLocation',
        'headline' => 'Headline',
        'education_experiences' => 'EducationExperiences',
        'work_experiences' => 'WorkExperiences',
        'cover_letter' => 'CoverLetter',
        'references' => 'References',
        'profile_summary' => 'ProfileSummary',
        'skills' => 'Skills',
        'job_titles' => 'JobTitles',
        'languages' => 'Languages',
        'certifications' => 'Certifications',
        'publications' => 'Publications',
        'awards' => 'Awards',
        'projects' => 'Projects',
        'achievements' => 'Achievements',
        'patents' => 'Patents',
        'hobbies_and_interests' => 'HobbiesAndInterests',
        'licenses' => 'Licenses',
        'volunteering' => 'Volunteering',
        'conference_and_seminars' => 'ConferenceAndSeminars',
        'military_history' => 'MilitaryHistory',
        'others' => 'Others'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_title' => 'setJobTitle',
        'personal_info' => 'setPersonalInfo',
        'contact_info' => 'setContactInfo',
        'person_location' => 'setPersonLocation',
        'headline' => 'setHeadline',
        'education_experiences' => 'setEducationExperiences',
        'work_experiences' => 'setWorkExperiences',
        'cover_letter' => 'setCoverLetter',
        'references' => 'setReferences',
        'profile_summary' => 'setProfileSummary',
        'skills' => 'setSkills',
        'job_titles' => 'setJobTitles',
        'languages' => 'setLanguages',
        'certifications' => 'setCertifications',
        'publications' => 'setPublications',
        'awards' => 'setAwards',
        'projects' => 'setProjects',
        'achievements' => 'setAchievements',
        'patents' => 'setPatents',
        'hobbies_and_interests' => 'setHobbiesAndInterests',
        'licenses' => 'setLicenses',
        'volunteering' => 'setVolunteering',
        'conference_and_seminars' => 'setConferenceAndSeminars',
        'military_history' => 'setMilitaryHistory',
        'others' => 'setOthers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_title' => 'getJobTitle',
        'personal_info' => 'getPersonalInfo',
        'contact_info' => 'getContactInfo',
        'person_location' => 'getPersonLocation',
        'headline' => 'getHeadline',
        'education_experiences' => 'getEducationExperiences',
        'work_experiences' => 'getWorkExperiences',
        'cover_letter' => 'getCoverLetter',
        'references' => 'getReferences',
        'profile_summary' => 'getProfileSummary',
        'skills' => 'getSkills',
        'job_titles' => 'getJobTitles',
        'languages' => 'getLanguages',
        'certifications' => 'getCertifications',
        'publications' => 'getPublications',
        'awards' => 'getAwards',
        'projects' => 'getProjects',
        'achievements' => 'getAchievements',
        'patents' => 'getPatents',
        'hobbies_and_interests' => 'getHobbiesAndInterests',
        'licenses' => 'getLicenses',
        'volunteering' => 'getVolunteering',
        'conference_and_seminars' => 'getConferenceAndSeminars',
        'military_history' => 'getMilitaryHistory',
        'others' => 'getOthers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_title'] = $data['job_title'] ?? null;
        $this->container['personal_info'] = $data['personal_info'] ?? null;
        $this->container['contact_info'] = $data['contact_info'] ?? null;
        $this->container['person_location'] = $data['person_location'] ?? null;
        $this->container['headline'] = $data['headline'] ?? null;
        $this->container['education_experiences'] = $data['education_experiences'] ?? null;
        $this->container['work_experiences'] = $data['work_experiences'] ?? null;
        $this->container['cover_letter'] = $data['cover_letter'] ?? null;
        $this->container['references'] = $data['references'] ?? null;
        $this->container['profile_summary'] = $data['profile_summary'] ?? null;
        $this->container['skills'] = $data['skills'] ?? null;
        $this->container['job_titles'] = $data['job_titles'] ?? null;
        $this->container['languages'] = $data['languages'] ?? null;
        $this->container['certifications'] = $data['certifications'] ?? null;
        $this->container['publications'] = $data['publications'] ?? null;
        $this->container['awards'] = $data['awards'] ?? null;
        $this->container['projects'] = $data['projects'] ?? null;
        $this->container['achievements'] = $data['achievements'] ?? null;
        $this->container['patents'] = $data['patents'] ?? null;
        $this->container['hobbies_and_interests'] = $data['hobbies_and_interests'] ?? null;
        $this->container['licenses'] = $data['licenses'] ?? null;
        $this->container['volunteering'] = $data['volunteering'] ?? null;
        $this->container['conference_and_seminars'] = $data['conference_and_seminars'] ?? null;
        $this->container['military_history'] = $data['military_history'] ?? null;
        $this->container['others'] = $data['others'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_title
     *
     * @return \OpenAPI\Client\Model\OptionalResumeJobTitle|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param \OpenAPI\Client\Model\OptionalResumeJobTitle|null $job_title job_title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets personal_info
     *
     * @return \OpenAPI\Client\Model\PersonalInfo|null
     */
    public function getPersonalInfo()
    {
        return $this->container['personal_info'];
    }

    /**
     * Sets personal_info
     *
     * @param \OpenAPI\Client\Model\PersonalInfo|null $personal_info personal_info
     *
     * @return self
     */
    public function setPersonalInfo($personal_info)
    {
        $this->container['personal_info'] = $personal_info;

        return $this;
    }

    /**
     * Gets contact_info
     *
     * @return \OpenAPI\Client\Model\ResumeContactInfoContactInfo|null
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     *
     * @param \OpenAPI\Client\Model\ResumeContactInfoContactInfo|null $contact_info contact_info
     *
     * @return self
     */
    public function setContactInfo($contact_info)
    {
        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets person_location
     *
     * @return \OpenAPI\Client\Model\PersonLocation|null
     */
    public function getPersonLocation()
    {
        return $this->container['person_location'];
    }

    /**
     * Sets person_location
     *
     * @param \OpenAPI\Client\Model\PersonLocation|null $person_location person_location
     *
     * @return self
     */
    public function setPersonLocation($person_location)
    {
        $this->container['person_location'] = $person_location;

        return $this;
    }

    /**
     * Gets headline
     *
     * @return \OpenAPI\Client\Model\Text|null
     */
    public function getHeadline()
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline
     *
     * @param \OpenAPI\Client\Model\Text|null $headline headline
     *
     * @return self
     */
    public function setHeadline($headline)
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets education_experiences
     *
     * @return \OpenAPI\Client\Model\EducationExperience[]|null
     */
    public function getEducationExperiences()
    {
        return $this->container['education_experiences'];
    }

    /**
     * Sets education_experiences
     *
     * @param \OpenAPI\Client\Model\EducationExperience[]|null $education_experiences Candidate's education experiences.
     *
     * @return self
     */
    public function setEducationExperiences($education_experiences)
    {
        $this->container['education_experiences'] = $education_experiences;

        return $this;
    }

    /**
     * Gets work_experiences
     *
     * @return \OpenAPI\Client\Model\WorkExperience[]|null
     */
    public function getWorkExperiences()
    {
        return $this->container['work_experiences'];
    }

    /**
     * Sets work_experiences
     *
     * @param \OpenAPI\Client\Model\WorkExperience[]|null $work_experiences Candidate's employment history.
     *
     * @return self
     */
    public function setWorkExperiences($work_experiences)
    {
        $this->container['work_experiences'] = $work_experiences;

        return $this;
    }

    /**
     * Gets cover_letter
     *
     * @return \OpenAPI\Client\Model\Text|null
     */
    public function getCoverLetter()
    {
        return $this->container['cover_letter'];
    }

    /**
     * Sets cover_letter
     *
     * @param \OpenAPI\Client\Model\Text|null $cover_letter cover_letter
     *
     * @return self
     */
    public function setCoverLetter($cover_letter)
    {
        $this->container['cover_letter'] = $cover_letter;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \OpenAPI\Client\Model\Reference[]|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \OpenAPI\Client\Model\Reference[]|null $references Candidate's references.
     *
     * @return self
     */
    public function setReferences($references)
    {
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets profile_summary
     *
     * @return \OpenAPI\Client\Model\ProfileSummary|null
     */
    public function getProfileSummary()
    {
        return $this->container['profile_summary'];
    }

    /**
     * Sets profile_summary
     *
     * @param \OpenAPI\Client\Model\ProfileSummary|null $profile_summary profile_summary
     *
     * @return self
     */
    public function setProfileSummary($profile_summary)
    {
        $this->container['profile_summary'] = $profile_summary;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return \OpenAPI\Client\Model\OptionalResumeSkill[]|null
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param \OpenAPI\Client\Model\OptionalResumeSkill[]|null $skills Candidate's skills.
     *
     * @return self
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets job_titles
     *
     * @return \OpenAPI\Client\Model\OptionalResumeJobTitle[]|null
     */
    public function getJobTitles()
    {
        return $this->container['job_titles'];
    }

    /**
     * Sets job_titles
     *
     * @param \OpenAPI\Client\Model\OptionalResumeJobTitle[]|null $job_titles Candidate's job titles.
     *
     * @return self
     */
    public function setJobTitles($job_titles)
    {
        $this->container['job_titles'] = $job_titles;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \OpenAPI\Client\Model\OptionalResumeLanguage[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \OpenAPI\Client\Model\OptionalResumeLanguage[]|null $languages Candidate's language skills.
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets certifications
     *
     * @return \OpenAPI\Client\Model\Certification[]|null
     */
    public function getCertifications()
    {
        return $this->container['certifications'];
    }

    /**
     * Sets certifications
     *
     * @param \OpenAPI\Client\Model\Certification[]|null $certifications Certifications earned by the candidate.
     *
     * @return self
     */
    public function setCertifications($certifications)
    {
        $this->container['certifications'] = $certifications;

        return $this;
    }

    /**
     * Gets publications
     *
     * @return \OpenAPI\Client\Model\Publication[]|null
     */
    public function getPublications()
    {
        return $this->container['publications'];
    }

    /**
     * Sets publications
     *
     * @param \OpenAPI\Client\Model\Publication[]|null $publications Candidate's publications, both academic papers and books.
     *
     * @return self
     */
    public function setPublications($publications)
    {
        $this->container['publications'] = $publications;

        return $this;
    }

    /**
     * Gets awards
     *
     * @return \OpenAPI\Client\Model\Award[]|null
     */
    public function getAwards()
    {
        return $this->container['awards'];
    }

    /**
     * Sets awards
     *
     * @param \OpenAPI\Client\Model\Award[]|null $awards List of the awards won by the candidate.
     *
     * @return self
     */
    public function setAwards($awards)
    {
        $this->container['awards'] = $awards;

        return $this;
    }

    /**
     * Gets projects
     *
     * @return \OpenAPI\Client\Model\Project[]|null
     */
    public function getProjects()
    {
        return $this->container['projects'];
    }

    /**
     * Sets projects
     *
     * @param \OpenAPI\Client\Model\Project[]|null $projects Projects the candidate worked or works on.
     *
     * @return self
     */
    public function setProjects($projects)
    {
        $this->container['projects'] = $projects;

        return $this;
    }

    /**
     * Gets achievements
     *
     * @return \OpenAPI\Client\Model\Achievement[]|null
     */
    public function getAchievements()
    {
        return $this->container['achievements'];
    }

    /**
     * Sets achievements
     *
     * @param \OpenAPI\Client\Model\Achievement[]|null $achievements Achievements earned by the candidate.
     *
     * @return self
     */
    public function setAchievements($achievements)
    {
        $this->container['achievements'] = $achievements;

        return $this;
    }

    /**
     * Gets patents
     *
     * @return \OpenAPI\Client\Model\Patent[]|null
     */
    public function getPatents()
    {
        return $this->container['patents'];
    }

    /**
     * Sets patents
     *
     * @param \OpenAPI\Client\Model\Patent[]|null $patents Candidate's patents.
     *
     * @return self
     */
    public function setPatents($patents)
    {
        $this->container['patents'] = $patents;

        return $this;
    }

    /**
     * Gets hobbies_and_interests
     *
     * @return \OpenAPI\Client\Model\Text[]|null
     */
    public function getHobbiesAndInterests()
    {
        return $this->container['hobbies_and_interests'];
    }

    /**
     * Sets hobbies_and_interests
     *
     * @param \OpenAPI\Client\Model\Text[]|null $hobbies_and_interests List of candidate's hobbies and interests.
     *
     * @return self
     */
    public function setHobbiesAndInterests($hobbies_and_interests)
    {
        $this->container['hobbies_and_interests'] = $hobbies_and_interests;

        return $this;
    }

    /**
     * Gets licenses
     *
     * @return \OpenAPI\Client\Model\License[]|null
     */
    public function getLicenses()
    {
        return $this->container['licenses'];
    }

    /**
     * Sets licenses
     *
     * @param \OpenAPI\Client\Model\License[]|null $licenses Candidate's licenses.
     *
     * @return self
     */
    public function setLicenses($licenses)
    {
        $this->container['licenses'] = $licenses;

        return $this;
    }

    /**
     * Gets volunteering
     *
     * @return \OpenAPI\Client\Model\Event[]|null
     */
    public function getVolunteering()
    {
        return $this->container['volunteering'];
    }

    /**
     * Sets volunteering
     *
     * @param \OpenAPI\Client\Model\Event[]|null $volunteering Candidate's works as volunteer.
     *
     * @return self
     */
    public function setVolunteering($volunteering)
    {
        $this->container['volunteering'] = $volunteering;

        return $this;
    }

    /**
     * Gets conference_and_seminars
     *
     * @return \OpenAPI\Client\Model\Event[]|null
     */
    public function getConferenceAndSeminars()
    {
        return $this->container['conference_and_seminars'];
    }

    /**
     * Sets conference_and_seminars
     *
     * @param \OpenAPI\Client\Model\Event[]|null $conference_and_seminars Conferences and seminars that the candidate may have partecipated in.
     *
     * @return self
     */
    public function setConferenceAndSeminars($conference_and_seminars)
    {
        $this->container['conference_and_seminars'] = $conference_and_seminars;

        return $this;
    }

    /**
     * Gets military_history
     *
     * @return \OpenAPI\Client\Model\MilitaryService[]|null
     */
    public function getMilitaryHistory()
    {
        return $this->container['military_history'];
    }

    /**
     * Sets military_history
     *
     * @param \OpenAPI\Client\Model\MilitaryService[]|null $military_history Candidate's military history.
     *
     * @return self
     */
    public function setMilitaryHistory($military_history)
    {
        $this->container['military_history'] = $military_history;

        return $this;
    }

    /**
     * Gets others
     *
     * @return \OpenAPI\Client\Model\Other[]|null
     */
    public function getOthers()
    {
        return $this->container['others'];
    }

    /**
     * Sets others
     *
     * @param \OpenAPI\Client\Model\Other[]|null $others Candidate's additional information not covered by the previous fields.
     *
     * @return self
     */
    public function setOthers($others)
    {
        $this->container['others'] = $others;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


